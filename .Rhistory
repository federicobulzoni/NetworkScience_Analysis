# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
group_by(community) %>%
filter(betweenness %in% sort(betweenness, decreasing = TRUE)[1:2])
centralExponents
sort(personProjection_t$betweenness)
# Da questi risultati sembrerebbe che ci siano due gruppi al comando l'1 ed il 5, un nucleo centrale formato dai gruppi 2,4 ed infine un gruppo satellite, il 3.
# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
group_by(community) %>%
filter(betweenness %in% sort(betweenness, decreasing = TRUE)[[1:2]])
centralExponents
personProjection_t
personProjection_t["nodes"]
personProjection_t[1]
personProjection_t[1]$betweenness
personProjection_t[1]["betweenness"]
# Da questi risultati sembrerebbe che ci siano due gruppi al comando l'1 ed il 5, un nucleo centrale formato dai gruppi 2,4 ed infine un gruppo satellite, il 3.
# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
group_by(community) %>%
filter(name %in% personProjection_t %>%
activate(nodes) %>%
arrange(-betweenness) %>%
head(2)
)
# Da questi risultati sembrerebbe che ci siano due gruppi al comando l'1 ed il 5, un nucleo centrale formato dai gruppi 2,4 ed infine un gruppo satellite, il 3.
# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
group_by(community) %>%
filter(name %in% (personProjection_t %>%
activate(nodes) %>%
arrange(-betweenness) %>%
head(2)
)
)
# Da questi risultati sembrerebbe che ci siano due gruppi al comando l'1 ed il 5, un nucleo centrale formato dai gruppi 2,4 ed infine un gruppo satellite, il 3.
# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble()
View(centralExponents)
# Da questi risultati sembrerebbe che ci siano due gruppi al comando l'1 ed il 5, un nucleo centrale formato dai gruppi 2,4 ed infine un gruppo satellite, il 3.
# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness)
centralExponents
# Da questi risultati sembrerebbe che ci siano due gruppi al comando l'1 ed il 5, un nucleo centrale formato dai gruppi 2,4 ed infine un gruppo satellite, il 3.
# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community) %>%
head(2)
centralExponents
# Da questi risultati sembrerebbe che ci siano due gruppi al comando l'1 ed il 5, un nucleo centrale formato dai gruppi 2,4 ed infine un gruppo satellite, il 3.
# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community)
centralExponents
# Da questi risultati sembrerebbe che ci siano due gruppi al comando l'1 ed il 5, un nucleo centrale formato dai gruppi 2,4 ed infine un gruppo satellite, il 3.
# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community) %>%
summarise(firstTwo = head(2))
centralExponents
# Da questi risultati sembrerebbe che ci siano due gruppi al comando l'1 ed il 5, un nucleo centrale formato dai gruppi 2,4 ed infine un gruppo satellite, il 3.
# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
group_by(community) %>%
filter(betweenness %in% c(max(betweenness), max(betweenness[-max(betweenness)]))) %>%
arrange(community) %>%
filter(community != 3)
centralExponents
# Da questi risultati sembrerebbe che ci siano due gruppi al comando l'1 ed il 5, un nucleo centrale formato dai gruppi 2,4 ed infine un gruppo satellite, il 3.
# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
group_by(community) %>%
filter(betweenness %in% betweenness[1:2]) %>%
arrange(community) %>%
filter(community != 3)
centralExponents
# Da questi risultati sembrerebbe che ci siano due gruppi al comando l'1 ed il 5, un nucleo centrale formato dai gruppi 2,4 ed infine un gruppo satellite, il 3.
# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
group_by(community) %>%
filter(betweenness %in% betweenness[1,2]) %>%
arrange(community) %>%
filter(community != 3)
# Da questi risultati sembrerebbe che ci siano due gruppi al comando l'1 ed il 5, un nucleo centrale formato dai gruppi 2,4 ed infine un gruppo satellite, il 3.
# Vediamo ora gli esponenti massimi di ogni gruppo.
centralExponents <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
group_by(community) %>%
filter(betweenness %in% c(betweenness[1], betweenness[2])) %>%
arrange(community) %>%
filter(community != 3)
centralExponents
personProjection_t %>%
filter(community == 4)
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness)
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
filter(community == 4) %>%
head(2)
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
filter(community == 4)
personProjection_t <- activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
filter(community == 4)
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
filter(community == 4) %>%
head(2)
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
filter(community == 4) %>%
group_by(community) %>%
head(2)
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community) %>%
head(2)
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
group_by(community) %>%
arrange(-betweenness)
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness)
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness, community)
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(community, -betweenness)
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community)
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community) %>%
filter(betweenness = max(betweenness))
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community) %>%
filter(betweenness == max(betweenness))
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community) %>%
filter(betweenness == sort(betweenness, decreasing = FALSE)[1])
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community) %>%
filter(betweenness == sort(betweenness, decreasing = TRUE)[1])
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community) %>%
filter(betweenness == sort(betweenness, decreasing = TRUE)[1:2])
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community) %>%
filter(betweenness %in% sort(betweenness, decreasing = TRUE)[1:2])
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community) %>%
filter(betweenness %in% sort(betweenness, decreasing = TRUE)[1:2]) %>%
head(10)
# Community detection di 5 gruppi.
comm <- cluster_walktrap(personProjection_t) %>%
as.hclust() %>%
cutree(k = 4)
personProjection_t <- personProjection_t %>%
activate(nodes) %>%
mutate(community  = as.factor(comm))
personProjection_t %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = community, size = betweenness)) +
geom_edge_link(aes(alpha = encounters))
# Ora possiamo stilare un classifica di importanza in base alla betweenness dei clusters.
rankingComm <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
group_by(community) %>%
summarize(avgBetweenness = mean(betweenness)) %>%
arrange(-avgBetweenness)
rankingComm
# Community detection di 5 gruppi.
comm <- cluster_walktrap(personProjection_t) %>%
as.hclust() %>%
cutree(k = 5)
personProjection_t <- personProjection_t %>%
activate(nodes) %>%
mutate(community  = as.factor(comm))
personProjection_t %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = community, size = betweenness)) +
geom_edge_link(aes(alpha = encounters))
# Ora possiamo stilare un classifica di importanza in base alla betweenness dei clusters.
rankingComm <- personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
group_by(community) %>%
summarize(avgBetweenness = mean(betweenness)) %>%
arrange(-avgBetweenness)
rankingComm
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
arrange(-betweenness) %>%
group_by(community) %>%
filter(betweenness %in% sort(betweenness, decreasing = TRUE)[1:2]) %>%
arrange(community) %>%
head(10)
personProjection_t %>%
activate(nodes) %>%
filter(community == 5)
personProjection_t %>%
activate(nodes) %>%
as_tibble() %>%
filter(community == 5)
graph <- graph_from_incidence_matrix(dataset)
graph_t <- as_tbl_graph(graph)
graph_t <- graph_t %>%
activate(nodes) %>%
mutate(type = ifelse(type, "summit", "partecipant"))
graph_t %>%
ggraph(layout = "fr") +
geom_edge_link() +
geom_node_point(aes(color = type))
allSummits <- graph_t %>%
activate(nodes) %>%
filter(type == "summit") %>%
as_tibble() %>%
inner_join(summits) %>%
rename(partecipants = degree) %>%
select(name, date, description, partecipants) %>%
arrange(-partecipants)
graph_t <- graph_t %>%
activate(nodes) %>%
mutate(degree = degree(graph_t))
allSummits <- graph_t %>%
activate(nodes) %>%
filter(type == "summit") %>%
as_tibble() %>%
inner_join(summits) %>%
rename(partecipants = degree) %>%
select(name, date, description, partecipants) %>%
arrange(-partecipants)
topSummits <- allSummits %>%
head(5)
topSummits
graph_t %>%
ggraph(layout = "fr") +
geom_node_point(aes(size = ifelse(type == "summit", degree, 1), color = ifelse(name %in% topSummits$name, "top summit", type))) +
geom_edge_link(aes(alpha = 0.1)) +
labs(color = "type", size = "partecipants") +
guides(edge_alpha = FALSE)
allPartecipants <- graph_t %>%
activate(nodes) %>%
filter(type == "partecipant") %>%
as_tibble() %>%
rename(partecipations = degree) %>%
select(name, partecipations) %>%
arrange(-partecipations)
topPartecipants <- allPartecipants %>%
head(5)
topPartecipants
graph_t %>%
ggraph(layout = "fr") +
geom_node_point(aes(size = ifelse(type == "partecipant", degree, 1), color = ifelse(name %in% topPartecipants$name, "top partecipant", type))) +
geom_edge_link(aes(alpha = 0.1)) +
labs(color = "type", size = "partecipations") +
guides(edge_alpha = FALSE)
# Ora sarebbe utile vedere le proiezioni one-mode.
personProjection <- bipartite_projection(graph, which = "false")
personProjection_t <- as_tbl_graph(personProjection, directed = FALSE)
personProjection_t <- personProjection_t %>%
activate(edges) %>%
rename(encounters = weight)
personProjection_t %>%
ggraph(layout = "kk") +
geom_node_point() +
geom_edge_link(aes(alpha = encounters))
# Gradi di separazione
mean_distance(personProjection_t)
# Massima distanza tra due individui
diameter(personProjection_t)
# Gradi di separazione
mean_distance(personProjection_t)
# Massima distanza tra due individui
diameter(personProjection_t)
maxPath <- get_diameter(personProjection_t)
maxPath
personProjection_t %>%
activate(nodes) %>%
filter(name %in% maxPath)
maxPath <- get_diameter(personProjection_t)
personProjection_t %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = ifelse(name %in% V(maxPath)$name, TRUE, FALSE)))+
geom_edge_link(aes(alpha = encounters))
maxPath
V(maxPath)
maxPath$name
maxPath <- get_diameter(personProjection_t)
personProjection_t %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = ifelse(name %in% maxPath$name, TRUE, FALSE)))+
geom_edge_link(aes(alpha = encounters))
maxPath <- get_diameter(personProjection_t)
personProjection_t %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = ifelse(name %in% maxPath$name, TRUE, FALSE)))+
geom_edge_link(aes(alpha = encounters))+
guides(node_color = FALSE)
maxPath <- get_diameter(personProjection_t)
personProjection_t %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = ifelse(name %in% maxPath$name, TRUE, FALSE)))+
geom_edge_link(aes(alpha = encounters))+
guides(node_colour = FALSE)
?guides
maxPath <- get_diameter(personProjection_t)
personProjection_t %>%
ggraph(layout = "kk") +
geom_node_point(aes(color = ifelse(name %in% maxPath$name, TRUE, FALSE)))+
geom_edge_link(aes(alpha = encounters, color = ))+
guides(nodes_colour = FALSE)
maxPathPerson <- personProjection_t %>%
activate(nodes) %>%
get_diameter(personProjection_t)
maxPathPerson <- personProjection_t %>%
get_diameter()
maxPath
maxPath <- personProjection_t %>%
get_diameter()
V(maxPath)
maxPath
E(maxPath)
maxPath
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F)))
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
# Perfetto fin qua.
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F))) +
# Ora devo colorare gli archi che uniscono due punti all'interno di maxPath
geom_edge_link(aes(color = ifelse(from %in% maxPath && to %in% maxPath, T, F)), show.legend = NULL)
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
# Perfetto fin qua.
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F))) +
# Ora devo colorare gli archi che uniscono due punti all'interno di maxPath
geom_edge_link(aes(color = ifelse(from %in% maxPath, to %in% maxPath, T, F)), show.legend = NULL)
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
# Perfetto fin qua.
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F))) +
# Ora devo colorare gli archi che uniscono due punti all'interno di maxPath
geom_edge_link(aes(color = ifelse(from %in% maxPath and to %in% maxPath, T, F)), show.legend = NULL)
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
# Perfetto fin qua.
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F))) +
# Ora devo colorare gli archi che uniscono due punti all'interno di maxPath
geom_edge_link(aes(color = ifelse(from %in% maxPath %and% to %in% maxPath, T, F)), show.legend = NULL)
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
# Perfetto fin qua.
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F))) +
# Ora devo colorare gli archi che uniscono due punti all'interno di maxPath
geom_edge_link(aes(color = ifelse(from %in% maxPath & to %in% maxPath, T, F)), show.legend = NULL)
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
# Perfetto fin qua.
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F))) +
# Ora devo colorare gli archi che uniscono due punti all'interno di maxPath
geom_edge_link(aes(color = ifelse(.N()$name['from'] %in% maxPath$name & .N()$name['to'] %in% maxPath$name, T, F)), show.legend = NULL)
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
# Perfetto fin qua.
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F))) +
# Ora devo colorare gli archi che uniscono due punti all'interno di maxPath
geom_edge_link(aes(color = ifelse(.N()$name['from'] %in% maxPath$name & .N()$name['to'] %in% maxPath$name, T, F)))
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
# Perfetto fin qua.
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F))) +
# Ora devo colorare gli archi che uniscono due punti all'interno di maxPath
geom_edge_link(aes(color = ifelse(.N()$name['from'] %in% maxPath$name & .N()$name['to'] %in% maxPath$name, T, F)), show.legend = FALSE)
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
# Perfetto fin qua.
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F))) +
# Ora devo colorare gli archi che uniscono due punti all'interno di maxPath
geom_edge_link(aes(color = ifelse(.N()$name['from'] %in% maxPath$name & .N()$name['to'] %in% maxPath$name, T, F), alpha = encounters), show.legend = FALSE)
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
# Perfetto fin qua.
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F))) +
# Ora devo colorare gli archi che uniscono due punti all'interno di maxPath
geom_edge_link(aes(color = ifelse(.N()$name[from] %in% maxPath$name & .N()$name[to] %in% maxPath$name, T, F), alpha = encounters), show.legend = FALSE)
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
# Perfetto fin qua.
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F))) +
# Ora devo colorare gli archi che uniscono due punti all'interno di maxPath, FUNZIONA, ma l'output è da migliorare.
geom_edge_link(aes(color = ifelse(.N()$name[from] %in% maxPath$name & .N()$name[to] %in% maxPath$name, "red", "grey"), alpha = encounters), show.legend = FALSE)
maxPath <- personProjection_t %>%
get_diameter()
# Potrei colorare i nodi identificati in maxPath
personProjection_t %>%
ggraph(layout = "kk") +
# Perfetto fin qua.
geom_node_point(show.legend = NULL, aes(color = ifelse(name %in% maxPath$name, T, F))) +
# Ora devo colorare gli archi che uniscono due punti all'interno di maxPath, FUNZIONA, ma l'output è da migliorare.
geom_edge_link(aes(color = ifelse(.N()$name[from] %in% maxPath$name & .N()$name[to] %in% maxPath$name, "red", "grey"), alpha = encounters), show.legend = FALSE)
